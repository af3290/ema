namespace MarketModels.Tests

module SimulationsTests =
    open System
    open TestData
    open Microsoft.FSharp.Core
    open NUnit.Framework
    open NUnit.Framework.Interfaces
    open MarketModels.MathFunctions
    open MarketModels.Simulations
    open MarketModels.Electricity

    let areWithinPrc (v1 : float) (v2 : float) (prc : float) : bool =
        (1.0 - prc) < (v1 / v2) && (v1 / v2) < (1.0 + prc)

    [<TestFixture>]
    type TimeSeriesUnitTests() = 
        member this.Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|]
        
        [<Test>]
        member this.MeansTest() =

            Assert.AreEqual(0, 0)

        [<Test>]
        member this.SpotPriceSimulationsTest1() = 
            let timeStepsInLevels = [|2; 8; 8; 8; 8; 32; 31; 32; 32; 32; 92; 93; 93; 91; 92; 93; 93; 91; 93; 366; 366; 367; 366|];
            let priceLevels = [|15.5; 17.9; 19.0; 19.85; 19.65; 18.8; 17.8; 16.1; 13.25; 14.8; 16.45; 14.91; 19.68; 21.61; 15.43; 14.33; 18.9; 21.45; 19.13; 17.46; 17.4; 18.6; 22.0|];
            let timeStep = 0.002777777777777778;
            let reversionRate = 25;
            let volatility = 0.2;

            Assert.AreEqual(0, 0)

        [<Test>]
        member this.PPATest() = 
            let nDays = 7*4*12*2
            let yyy = TestData.HourlySystemPriceTestData |> Seq.take (24*nDays) |> Seq.toArray

            //to daily
            let dy = Array.init nDays (fun i -> yyy.[24*i..24*i+23] |> mean)
            let ppa = new PowerPurchasingAgreement()
            
            //ppa.InterestRate <- 0.025
            ppa.Evaluate dy 20 0.95

            Assert.AreEqual(0, 0)
