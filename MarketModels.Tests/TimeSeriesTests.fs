namespace MarketModels.Tests

module TimeSeriesTests =
    open Microsoft.FSharp.Core
    open NUnit.Framework
    open NUnit.Framework.Interfaces
    open MarketModels.MathFunctions
    open MarketModels.TimeSeries
    open MarketModels.Tests
    open MarketModels.Optimization
    open MarketModels.Operations

    let areWithinPrc (v1 : float) (v2 : float) (prc : float) : bool =
        (1.0 - prc) < (v1 / v2) && (v1 / v2) < (1.0 + prc)

    [<TestFixture>]
    type TimeSeriesUnitTests() = 
        member this.Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|]
        member this.E = [|-1.82685867031308; -1.35165909803276; -2.20877776449571; -2.07240649521385; -2.01592709857203; 0.0833848214989643; -0.489593359565870; -0.963869603835474; 0.00276809623009111; -0.964696780197351; 0.437136844814636; 1.03902994862363; 0.686146849363895; 1.32786083200205; -0.516666585934343; 2.30592076109070; -0.898445763984057; -0.848599934599480; 2.00223518700306; -1.89899474448736; -1.17669832447034; -0.117662293973938; -1.12171819772432; 2.59119400151084; -1.77533857963747; -0.380397714925289; 0.257051490595630; -0.624643860520891; -2.90615463080411; -1.16417582599196; 0.383670088300465; 9.73914843758585; 2.93413000228282; -3.24750631538322; -1.34024693164813; -1.44309376614550; 2.22007903835298; -2.16101954398654; 0.949911089585048; -3.63762708422115; -1.49666531471103; -0.338456568612867; 5.83836897629736; -4.74256684244782; 0.237618782874292; -1.39871176072982; 0.748144720863540; 1.61661301928910; 1.55985385856934; -0.522765694318285; 0.250732169161046; 0.692606612443869; -0.330649110899923; 0.881946886203499; 1.18279791264344; -0.505794060949101; -1.61330032387391; 0.333045581058764; 0.134591619160237; 1.17157468228490; 1.06796392803980; 0.796813500718651; 1.15458776279453; 1.52456897034188; 0.915401179749889; 1.08840489774099; 1.20967830778914; 1.00836540486750; 0.203362801824010; -0.947471561398104|]
        
        member this.Yf = [|35.6425064759818; 35.3108479456079; 35.6476707243436; 36.1718655280130; 36.6263362411149; 36.9062576827983; 36.9570224340249; 36.8986962009210; 36.8347276188186; 36.7517655165464; 36.6168518884699; 36.5316552209422; 36.5010751280919; 36.5649517943157; 36.6945568097963; 36.8300612463439; 36.9491457689013; 37.0460969699781; 37.0832194404010; 37.0727918887809; 37.0495462957119; 37.0208231977913; 36.9552615107027; 36.8008358659226 |]
        member this.YMSE = [| 4.11884873345281; 10.0687101038763; 13.7104633912843; 14.8418151291542; 14.9417515367846; 14.9662084795079; 15.0868711765208; 15.2015472847874; 15.2553019869624; 15.2669451173838; 15.2671084247505; 15.2686333498704; 15.2714825655665; 15.2734595974040; 15.2741631851619; 15.2742526748668; 15.2742566964012; 15.2743082535774; 15.2743662995209; 15.2743969504874; 15.2744048598221; 15.2744052061435; 15.2744057113898; 15.2744070363181|]

        member this.ARMAModel1 = {
            AR = {
                    Coefficients = [|1.20189; -0.504243; 0.0289846|];
                    Lags = [|1; 2; 24|]
                };
            MA = {
                    Coefficients = [|0.0201776|];
                    Lags = [|24|]
                };
            Const = 10.0;
            Var = 4.11885
        }

        [<Test>]
        member this.FilterTest1() = 
            //artificial data... etc...
            let Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|];
            
            let resf = Filter1D [|1.0; -1.2106; 0.5433; 0.1233|] [| 1.0; 0.5 |] Y

            Assert.AreEqual(resf.[0], Y.[0])

        [<Test>]
        member this.FilterTest2() = 
            //data taken from matlab... why are the differences so big?
            let Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|];
            let result = [|31.9701258398659; -7.64557897847645; 9.81076487092602; 9.92203181513606; 9.94801796778196; 12.0292201882761; 11.4335667165928; 11.0289581899588; 12.0738428728465; 11.1394134895206; 12.5892263357701; 13.1821992537807; 12.8434421647579; 13.5328461943673; 11.7187361018659; 14.5958319355031; 11.3449957363468; 11.4525330009900; 14.2720266703725; 10.2794148561517; 11.0502306680233; 12.0453233914741; 10.9428692784185; 14.6021216868775; 10.1001970539149; 11.6089775491069; 12.1930753476076; 11.2709651397907; 8.98951635540043; 10.8400910364750; 12.3346442585213; 21.6416739822037; 14.8396719874796; 9.03541268360689; 11.2869426721165; 11.1338972292516; 14.6223066057728; 10.0688014191681; 13.1325078896097; 8.56933784878235; 10.6767688852915; 11.6978366431142; 17.9032643283219; 7.15397249790237; 12.4141324494238; 10.7321981103584; 12.8217626468801; 13.7788893004932; 13.6136543030269; 11.6096323899938; 12.4960034961250; 12.9009969779339; 11.7192579532827; 12.9209754733172; 13.2451327083767; 12.0746415618670; 11.0584875378073; 12.7728185500383; 12.3693955710181; 13.2339475704272; 13.2081344105132; 12.8478779103052; 13.3563778315130; 13.5898953276529; 13.0019279020442; 13.2393475757505; 13.7017165882215; 13.2203486449683; 12.4923671612387; 11.2550239853002; 12.8034910592081; 11.0077582055074; 11.0645417136472; 12.1359540791084; 11.1743704256531; 12.8505039254302; 12.6674295821861; 12.4396577143065; 11.0468854838989; 12.5005430290343; 11.0487165759585; 11.7229515175376; 13.2661269759000; 11.3711519650126; 17.2511214328127; 8.41929491904165; 18.6302529763273; 11.3532166773698; 9.11643477760740; 11.8724686395130; 10.9981072845866; 10.7832314762326; 12.6870611404071; 13.0149782246981 |];
            
            let resf = Filter1D [|1.0; -1.2106; 0.5433|] [| 1.0 |] Y

            Assert.AreEqual(resf.[0], Y.[0], 0.001)

            let diffs = Array.init resf.Length (fun i -> resf.[i] - result.[i])
            //it's very small...-0.1845246733039172, so the filter can't be wrong.. it does its job well... yes...
            let diffsSum = diffs |> Array.sum
            
            for i in 1..10 do
                Assert.AreEqual(resf.[i], result.[i], 0.01)

            Assert.AreEqual(resf.Length, Y.Length)
            Assert.AreEqual(resf.Length, result.Length)

        [<Test>]
        member this.TestFloatingPointErrorsVsMatlab() = 
            let Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|];
            
            let a1 = SeriesAutocorrelationFFT Y.[0..20]
            let l1 = L2Norm Y.[0..20]
            let a2 = SeriesAutocorrelationFFT Y.[0..45]
            let l2 = L2Norm Y.[0..45]
            let a3 = SeriesAutocorrelationFFT Y
            let l3 = L2Norm Y

            Assert.AreEqual(1, 1)

        [<Test>]
        member this.ARMATestLongerLags0() = 
            //IN TODO:...
            let yyy = TestData.HourlySystemPriceTestData |> Seq.take (24*7*4*12) |> Seq.toArray

            let res = ARMASimple2 yyy [|1; 3; 6|] [|1|]

            //vs values from matlab outputs
            //quite large errors, but still ok
            Assert.AreEqual(res.AR.Coefficients.[0], 1.2369, 0.05)
            Assert.AreEqual(res.AR.Coefficients.[1], -0.4939, 0.05)
            Assert.AreEqual(res.AR.Coefficients.[2], -0.1464, 0.05)
            Assert.AreEqual(res.MA.Coefficients.[0], 0.1282, 0.05)

        [<Test>]
        member this.ARMATest01() = 
            let Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|];
            
            let res = ARMASimple Y 2 1

            Assert.AreEqual(4, 2+2)

        [<Test>]
        member this.ARMAInferResidualsOfSpecifiedModel() = 
            //PASSES!!!

            //take the in-sample part
            let yy = Array.sub this.Y 0 70
             
            let res = Infer this.ARMAModel1 yy

            this.E |> Array.iteri (fun i x -> Assert.AreEqual(res.[i], x, 0.01))

        [<Test>]
        member this.ARMAForecastSpecifiedModel() = 
            let yy = Array.sub this.Y 0 70
                        
            let forecasted = Forecast yy this.E this.ARMAModel1 24 0.95

            //works just fine...
            this.Yf |> Array.iteri (fun i x -> Assert.IsTrue(areWithinPrc x  forecasted.Forecast.[i] 0.02))
             
            let rlzd = Array.sub this.Y 69 24
            let fc = forecasted.Forecast
            let residuals =  fc -- rlzd
            let sqErrs = residuals ^^ 2.0
            ()
            //not working yet
            //this.YMSE |> Array.iteri (fun i x -> Assert.AreEqual(sqErrs.[i], x, 0.01))            

        [<Test>]
        member this.ARMAEstimateAndForecastTest01() = 
            let Y = [|31.9701258398659; 31.0566057478547; 30.0367977830021; 29.4098534693792; 29.2309678510293; 31.4362523770192; 33.6074513348075; 34.6330454500176; 35.7398136451162; 35.5879742939911; 36.2526361638673; 37.7327296685769; 38.8246049520236; 40.0316277476803; 39.0854608193705; 40.1613426766006; 38.7270195691525; 36.5136465205741; 37.4329976892467; 35.7559158058523; 33.9969915079280; 33.7739829827230; 33.3572337240452; 36.6331473600124; 36.3233883115212; 35.6772867067768; 35.6475318772809; 35.0404464399008; 32.0402427943400; 30.5886972684373; 31.9561430865081; 43.7072318925434; 50.3878139394647; 46.2861926242720; 39.9426607038115; 34.3388303357668; 34.4900109240278; 33.1642396110154; 34.5408618964680; 32.3645230577274; 31.0893785217079; 31.7492563016660; 39.4463363862639; 37.6563949943225; 36.5676593410869; 34.5402560618265; 34.7670407731469; 37.1002522025905; 39.6363224428661; 39.4347003645476; 38.6990748412613; 38.3230865606927; 37.0858721550586; 36.9941358041080; 37.8794528392554; 37.8305459078931; 36.2741688038464; 36.1309635666233; 36.3998035936597; 37.6676136189519; 39.0305092342493; 39.6313010971483; 40.1266041561924; 40.6332952537853; 40.3896025209229; 40.0567147222137; 40.2485037288420; 40.1801777651232; 39.2652783232952; 36.9575056148528; 36.2093349799322; 34.7617644671117; 33.4726597335516; 33.7700219457441; 33.8688239473140; 35.5029992700072; 37.2445322370402; 38.2371204761820; 37.0997253405636; 36.6371814499304; 35.2433904264698; 34.4816521022939; 35.8599732583205; 36.0474310683675; 41.4054513239057; 38.9580506392728; 43.2950873456220; 42.5980940611288; 37.1611165733388; 33.7139860352261; 31.6206828671640; 30.7446328606229; 32.7252901626463; 35.9269209515003|];
            
            let res = ARMASimple Y 2 1

            Assert.AreEqual(4, 2+2)

        [<Test>]
        member this.ARMATestLongerLags() = 
            //WORKS... AWESOME..
            let yyy = TestData.HourlySystemPriceTestData |> Seq.take (24*7*4*12) |> Seq.toArray

            let res = ARMASimple2 yyy [|1; 2; 24|] [|24|]
            
            //vs values from matlab outputs
            //quite large errors, but still ok
            Assert.AreEqual(res.AR.Coefficients.[0], 1.2369, 0.05)
            Assert.AreEqual(res.AR.Coefficients.[1], -0.4939, 0.05)
            Assert.AreEqual(res.AR.Coefficients.[2], 0.1464, 0.05)
            Assert.AreEqual(res.MA.Coefficients.[0], 0.1282, 0.05)
             
        [<Test>]
        member this.ARMATestLongerLags2() = 
            
            let yyy = TestData.HourlySystemPriceTestData |> Seq.take (24*7*4*12) |> Seq.toArray

            let res = ARMASimple2 yyy [|1; 2; 24|] [|1; 24|]

            //vs values from matlab outputs
            //quite large errors, but still ok
            Assert.AreEqual(res.AR.Coefficients.[0], 1.2369, 0.05)
            Assert.AreEqual(res.AR.Coefficients.[1], -0.4939, 0.05)
            Assert.AreEqual(res.AR.Coefficients.[2], 0.1464, 0.05)
            Assert.AreEqual(res.MA.Coefficients.[0], 0.1282, 0.05)

        [<Test>]
        member this.ARMATest1() =             
            //a year worth of data... should suffice...
            let yyy = TestData.HourlySystemPriceTestData |> Seq.take (24*7*4*12) |> Seq.toArray
            
            //problem... why 4sec on filtering 8k data points...? TODO: refactor...
            let res = ARMASimple yyy 2 1
            
            //versus matlab 1.20744102237650 -0.258813763653975
            Assert.AreEqual(res.AR.Coefficients.[0], 1.2055, 0.01)
            Assert.AreEqual(res.AR.Coefficients.[0], 0.2574, 0.01)

            //versus matlab 1.20744102237650 -0.258813763653975
            Assert.AreEqual(res.MA.Coefficients.[0], 1.2055, 0.01)

            //vs matlab 2.1187
            Assert.AreEqual(res.Const, 2.1396, 0.1)
            
            //vs matlab 7.1188
            Assert.AreEqual(res.Var, 7.1, 0.1)

        [<Test>]
        member this.ARMATest2() = 
            //deterministic function with noise...
            let Y = [||];
            
            let res = ARMASimple Y 2 1

            Assert.AreEqual(4, 2+2)

        [<Test>]
        member this.ARMATest3() = 
            //simple trend... etc...
            let Y = [|1.0; 2.0; 3.0; 4.0;|];
            
            let res = ARMASimple Y 2 1

            Assert.AreEqual(4, 2+2)

        [<Test>]
        member this.OptimTest1() = 
            //WORKS!
            //lsqlin data from AR [1 3 6] demo
            let C = 
                array2D [|[|0.0992778571856557; 0.174645080517514; 0.0992778571856557; 0.0358987395125802; -0.0243687278044009; -0.0530272016540059|];
                    [|0.0358987395125802; 0.0992778571856557; 0.174645080517514; 0.0992778571856557; 0.0358987395125802; -0.0243687278044009|];
                    [|-0.0243687278044009; 0.0358987395125802; 0.0992778571856557; 0.174645080517514; 0.0992778571856557; 0.0358987395125802|];
                    [|-0.0530272016540059; -0.0243687278044009; 0.0358987395125802; 0.0992778571856557; 0.174645080517514; 0.0992778571856557|];
                    [|-0.0569224049535282; -0.0530272016540059; -0.0243687278044009; 0.0358987395125802; 0.0992778571856557; 0.174645080517514|];
                    [|-0.0595891288544603; -0.0569224049535282; -0.0530272016540059; -0.0243687278044009; 0.0358987395125802; 0.0992778571856557|]|];
            
            let d = [|0.0358987395125802;-0.0243687278044009;-0.0530272016540059;-0.0569224049535282;-0.0595891288544603;-0.0366910298907116|];

            let Aeq = array2D [|[|0.0;1.0;0.0;0.0;0.0;0.0|];
                            [|0.0;0.0;0.0;1.0;0.0;0.0|];
                            [|0.0;0.0;0.0;0.0;1.0;0.0|]|];

            let beq = [|0.0;0.0;0.0|]

            let res = ConstrainedLinearLeastSquares C d Aeq beq

            let expRes = [|0.551247137358563;0.0;-0.290909795558365;0.0;0.0;-0.197968260699265|]
            
            expRes |> Array.iteri (fun i x -> Assert.AreEqual(res.[i], x, 0.001))

        [<Test>]
        member this.OptimTest2() = 
            //Very simple example
            //WORKS!!!! AWESOME...
            let C = 
                array2D [|[|1.0; 2.0|];
                    [|3.0; 4.0|];|];
            
            let d = [|5.0; 6.0|];

            let Aeq = array2D [|[|0.0; 0.0|]|];

            let beq = [|0.0|]

            let res = ConstrainedLinearLeastSquares C d Aeq beq

            let expRes = [|-4.0; 4.5|]
            
            expRes |> Array.iteri (fun i x -> Assert.AreEqual(res.[i], x, 0.001))
